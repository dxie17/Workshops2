// Workshop: 5
// Full Name: Deyang Xie
// Student ID: 150162204
// Email Address: dxie17@myseneca.ca
// Date: 2021/11/6
// Description: I have done all the coding by myself and only copied the code
// that my professor provided to complete my workshops and assignments.
///////////////////////////////////////////////////
1. The difference between the implementations/utilizations of a functor and a lambda expression.When is appropriate to use each one?

A function object is an object-oriented representation of a function. In C++, a function object is also called a functor. For example, in workshop 5 I create a function std::ostream& display(std::ostream& ostr) const to display the class Collection.
a lambda expression is a special function object that is only used in a local area of an application (that is, within a function) with different expressions. A lambda expression does not require an identifier and is shorthand for a function object. But if the expression is used more than once it can be given a name and referred to by that name within the body of its host function.  For example, in workshop 5 I create a lambda expression auto updatePrice = [&](Book &b) {} to update the price in the class Book. Because a lambda expression is a special function object so I can also realize it with a function such as double & update(Book & b){}. There is no big difference. But apparently, the lambda expression will be more concise and effective. Just like Herb Sutter said, Syntactically, they are nothing but sugar for function objects, lambdas touch many wide-ranging kinds of code â€” from their convenience when writing concurrent and scalable parallel code, to how they stand to revolutionize STL usability and programming, to how they enable such small conveniences as local functions and local variable initialization.


2. The constructor for SpellChecker generates an exception in certain conditions. How would you change your code to achieve the same result, but without exceptions (both on the constructor and on the client side)? Compare the two solutions.

I think another solution to realize it is to create a global variable to control the data transfer between SpellChecker.cpp and main function. For example, I can create a global variable flag to control if SpellChecker reads file correctly or not. When it's correct, flag=1, or else flag=0 such as:
if (!fin) { 
  std::cout << "error" << std::endl;
  flag = 0;
  }
  else {flag=1;}.
In the main function, when flag==1, the main function will get the information that SpellChecker is executed correctly so it will go to right step such as:
if(flag==1){
for (auto j = 0u; j < library.size(); ++j)
		library[j].fixSpelling(sp);
sp.showStatistics(std::cout);
}
The result is the same with the try and catch. But it's not good as the try-and-catch method because the global variables will not be concise and sometimes it probably will result in confusion and mistake if we use unnecessary global variables frequently.


3. The classes Movie and Book contain almost identical logic in loading data from the file. How would you redesign the classes in order not to duplicate that logic?
The classes Movie and Book are instantiated from the main() function using a custom constructor, but they also contain a default constructor. Is the default constructor necessary? Could you remove it? Justify your answer.

If I redesign the classes to make sure the logic not same when loading from the file, I would like to build two class Movie and Books. Movie is just the same with this workshop but Books will store information of piles of books such as:
class Books{
std::string *m_author;
std::string *m_title;
std::string *m_countryOfPublication;
std::string *m_description;
int *m_yearOfPublication=0;
double *m_price;
unsigned int m_numOfBooks;
}.
Meanwhile, Movie and Book's default constructors are necessary although main function just uses their custom constructors. The reason why they are important and can not be deleted is that in the template function Collection<T>& Collection<T>::operator+=(const T& item) new default Book or Movie will be created. If default constructors for don't exist, the complier will run an error which shows no appropriate default constructor available. It's easy to prove it. When I delete Movie default constructor and compile the code again, the complier shows the error as described. So, they are necessary and cannot eliminated. 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
THE END